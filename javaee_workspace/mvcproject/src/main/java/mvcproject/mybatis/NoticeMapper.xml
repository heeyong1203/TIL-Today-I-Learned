<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Notice">
	
	<!-- SQL Mapper: SQL문과 Java객체와의 매핑을 자동으로 지원하는 프레임워크. Mybatis 
			ORM(Object-Relation-Mapping): Java객체와 데이터베이스를 자동으로 매핑. Hibernate, JPA -->
	<!-- namespace 많은 수의 Mapper.xml이 작성된 경우 id가 중복되었을 때 구분이 어려워 namespace로 2차 구분을 결정지음 -->	
	<!-- 기존에 DAO의 업무였던 CRUD 작업의 쿼리 작성을 여기서 한다. DAO는 여전히 존재하되, DAO가 직접 쿼리를 작성하지 않는 것 뿐이다. -->
	
	<!-- 모두 가져오기 -->
	<select id="selectAll" resultType="Notice">
		select * from notice order by notice_id desc <!-- 프로그램 언어가 아닌 xml 파일이므로 세미콜론(;)은 제거한다. -->
	</select>
	
	<!-- 글 한 건 넣기 -->
	<insert id="insert" parameterType="Notice">
		insert into notice(title, writer, content) values(#{title}, #{writer}, #{content})
	</insert>
	
	<!-- 글 한 건 가져오기 
			Mybatis 스스로 Notice 모델에 담는다. 따라서 담은 결과는 resultType으로 반환해야 한다.
	-->
	<select id="select" parameterType="int" resultType="Notice">
		select notice_id, title, writer, content, regdate, hit from notice where notice_id=#{notice_id}
	</select>
	
	<!-- 글 한 건 삭제하기 -->
	<delete id="delete" parameterType="int">
		delete from notice where notice_id = #{notice_id}
	</delete>
	
	<!-- 글 한 건 수정하기 -->
	<update id="update" parameterType="Notice">
		update notice set title=#{title}, writer =#{writer}, content=#{content} 
		where notice_id=#{notice_id}
	</update>
	
</mapper>