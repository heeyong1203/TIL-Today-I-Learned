SQL> --SYS 계정은 되도록 사용을 지양하도록 한다..워낙 막강해서
SQL> --사용이 부담스러움. SYS보다는 하위의 관리자인 SYSTEM 이용
SQL> --SYS계정으로 로그인 한 상태에서 SYSTEM의 계정을 재할당
SQL> ALTER  USER SYSTEM
  2  IDENTIFIED BY 1234;

User altered.

SQL> --이미 SQLPLUS 에 접속을 한 상태에서 다른 계정으로 전환할때
SQL> --SQLPLUS 호출하지 말자, 접속을 전환하는 명령어는 CONNECT,CONN
SQL> CONN SYSTEM/1234
Connected.
SQL> --현재 접속 계정 확인
SQL> SHOW USER;
USER is "SYSTEM"
SQL> --현재 시스템에 존재하는 모든 유저를 출력
SQL> --오라클에서 시스템 정보를 알기 위해서는 사전을 조회
SQL> --현재 접속자가 관리자인 경우 사전의 이름은 접두어가 DBA_, V$로 시작
SQL> SELECT  USERNAME  FROM DBA_USERS;

USERNAME                                                                        
------------------------------------------------------------                    
SYS                                                                             
SYSTEM                                                                          
ANONYMOUS                                                                       
JAVA                                                                            
JS                                                                              
APEX_PUBLIC_USER                                                                
FLOWS_FILES                                                                     
APEX_040000                                                                     
OUTLN                                                                           
DIP                                                                             
ORACLE_OCM                                                                      

USERNAME                                                                        
------------------------------------------------------------                    
XS$NULL                                                                         
MDSYS                                                                           
CTXSYS                                                                          
DBSNMP                                                                          
XDB                                                                             
APPQOSSYS                                                                       
HR                                                                              

18 rows selected.

SQL> --일반 계정인 JS로 로그인 하자
SQL> CONN JS/1234
Connected.
SQL> SHOW USER;
USER is "JS"
SQL> --제약조건을 추가적으로 학습
SQL> --NOT NULL, DEFAULT, UNIQUE, CHECK, PRIMARY KEY, FOREIGN KEY
SQL> --JS가 보유한 테이블목록 조회
SQL> --사전을 조회하자 , 현재 계정이 일반인 계정이기 때문에 사전이름
SQL> --은 USER_로 시작 ...
SQL> SELECT TABLE_NAME FROM USER_TABLES;

TABLE_NAME                                                                      
------------------------------------------------------------                    
MEMBER                                                                                                                                    

SQL> -- 제약 조건 중 너무 너무 필수적인 제약 조건인 PRIMARY KEY 학습
SQL> -- UNIQUE + NOT NULL = PRIMARY KEY
SQL> -- UNIQUE만으로는 아직 무결성을 보장받지 못하는 경우가 있음
SQL> CREATE TABLE MEMBER2(
  2  ID VARCHAR2(20)
  3  ,EMAIL VARCHAR2(25)
  4  ,REGDATE DATE DEFAULT
  5  );
)

Table created.

SQL> INSERT INTO MEMBER2(ID, EMAIL) VALUES('KING', 'DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(ID, EMAIL) VALUES('KING', 'DAUM');
INSERT INTO MEMBER2(ID, EMAIL) VALUES('KING', 'DAUM')
*
ERROR at line 1:
ORA-00001: unique constraint (JS.SYS_C007011) violated 


SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> 
SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> SELECT * FROM MEMBER2;

ID                                                                              
----------------------------------------                                        
EMAIL                                              REGDATE                      
-------------------------------------------------- --------                     
KING                                                                            
DAUM                                               25/05/07                     
                                                                                
                                                                                
DAUM                                               25/05/07                     
                                                                                
                                                                                
DAUM                                               25/05/07                     
                                                                                

ID                                                                              
----------------------------------------                                        
EMAIL                                              REGDATE                      
-------------------------------------------------- --------                     
                                                                                
DAUM                                               25/05/07                     
                                                                                
                                                                                
DAUM                                               25/05/07                     
                                                                                

SQL> DROP TABLE MEMBER2;

Table dropped.

  1  CREATE TABLE MEMBER2(
  2  ID VARCHAR(20) PRIMARY KEY
  3  , EMAIL VARCHAR(25) NOT NULL
  4  , REGDATE DATE DEFAULT SYSDATE
  5* )

Table created.

SQL> -- UNIQUE는 중복을 허용하지 않는 장치이긴 하지만, NULL을 허용한다는 취약점이 있음
SQL> -- 따라서 테이블에 입력된 데이터들 간 구분을 위한 숫자형 컬럼을 추가할 때는
SQL> -- UNIQUE + NOT NULL의 제약 조건을 부여해야 안전하다.
SQL> -- 하지만, UNIQUE + NOT NULL을 둘 다 명시하기보단 PRIMARY KEY를 사용하는 것을 권장한다.
SQL> -- PRIMARY KEY는 UNIQUE와 NOT NULL의 기능을 동시에 만족하는 기능이다.
SQL> 
SQL> CREATE TABLE MEMBER3(
  2  ID NUMBER  PRIMARY KEY
  3  , EMAIL VARCHAR2(25)
  4  , REGDATE DATE DEFAULT SYSDATE
  5  , USERID VARCHAR2(20)
  6  );

Table created.

SQL> -- 컬럼간의 순서는 중요하지 않음
SQL> -- PRIMARY KEY 값은 유일해야 하므로, 시스템이 알아서 증가시켜가면서 넣도록 맡겨야 함
SQL> -- 따라서, 오직 숫자값만을 전용으로 증가시켜주는 객체인 SEQUECE를 이용하자
SQL> CREATE SEQUENCE SEQ_MEMBER3
  2  INCREMENT BY 1
  3  START WITH 1;
CREATE SEQUENCE SEQ_MEMBER3
*
ERROR at line 1:
ORA-01031: insufficient privileges 


SQL> -- 권한을 부여받기 위해서 다시 SYSTEM으로 접근하자
SQL> CONN SYSTEM/1234
Connected.
SQL> GRANT CREATE SEQUENCE TO JS;

Grant succeeded.

SQL> 다시 JS로 이동
SP2-0734: unknown command beginning "다시 JS로 ..." - rest of line ignored.
SQL> -- 다시 JS로 이동
SQL> CONN JS/1234
Connected.
SQL> CREATE SEQUENCE SEQ_MEMBER3
  2  INCREMENT BY 1
  3  START WITH 1;

Sequence created.

SQL> -- 현재 네가 갖고 있는 값을 증가시켜라
SQL> INSERT INTO MEMBER3(ID,USERID,EMAIL)
  2  VALUES(SEQ_MEMBER3.NEXTVAL, 'KING', 'DAUM');

1 row created.

SQL> INSERT INTO MEMBER3(ID,USERID,EMAIL)
  2  VALUES(SEQ_MEMBER3.NEXTVAL, 'ADAMS', 'NAVER');

1 row created.

SQL> SELECT * FROM MEMBER3;

        ID EMAIL                                              REGDATE           
---------- -------------------------------------------------- --------          
USERID                                                                          
----------------------------------------                                        
         1 DAUM                                               25/05/07          
KING                                                                            
                                                                                
         2 NAVER                                              25/05/07          
ADAMS                                                                           
                                                                                

SQL> SPOOL OFF
