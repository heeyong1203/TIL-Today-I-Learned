/* Javascript와 주석 동일
     class는 소문자로 시작, class명은 반드시 대문자로 시작
     class 명명 규칙 : 두 단어 이상의 조합일 경우, 낙타 등 기법으로 작성(뒤에 따라오는 단어의 첫 글자는 대문자)
     파일명 규칙 : Java는 클래스명과 파일명이 반드시 일치해야 함
     좋은 습관 : 파일명 저장 시 직접 작성이 아닌, 복사해 쓰자
*/

/* Java 실행 파일 → .exe 확장자 파일
	 Java.exe : 실행 (main method 호출)
	 Javac.exe : 컴파일 
	 javadoc.exe : 설명서 작성 시 사용

*/

// class의 기본 형태
class DataType{
	// Java의 기본 자료형도 다른 언어와 마찬가지로, 3가지 종류가 있음 ; 문자(문자, 문자열), 숫자, 논리값
	
	/* let y=7; javascript는 데이터의 종류를 신경 쓸 필요가 없음
						따라서, 초보자들에게 큰 부담이 없음 */
	int y=7; // java는 컴파일 기반의 언어적 특성 때문에, 반드시 변수 선언 시 자료형의 종류를 결정해야 함
	
	// 이 클래스를 실행 가능한 클래스로 정의하려면, 즉 java.exe의 대상이 되려면 반드시 main() 메서드를 정의해야 함
	/* 컴파일 기반 언어(c, c++, java, c# 등등)의 특징
		 단점: 1) 실행 전 컴파일 과정이 번거로울 수 있음
				 2) 초보자들에게 진입장벽이 높음
		 장점: 일단 한 번 자료형이나 문법 검사(컴파일 compile)가 끝나면 그 결과물을 바이너리 파일로 저장해 놓고,
			 	 이후부터는 두 번 다시 문법 검사를 수행하는 것이 아니라, 컴파일 결과물로 생성된 기계어를 실행하기 때문에
				 이 시점부터는 인터프리터 언어에 비해 속도가 훨씬 빠름
	*/
	
	public static void main(String[] args){
		System.out.println("Adams");
	}
}
