package table;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableModel;

public class MemberRegist extends JFrame implements ActionListener, WindowListener, MouseListener{ // extends JFrame을 하므로써 현재 this는 JFrame
	// 서쪽 영역
	JPanel p_west;
	JTextField t_id; // 아이디
	JTextField t_name; // 성명
	JTextField t_tel; // 연락처
	JButton bt;
	
	// 센터 영역
	JPanel p_center;
	JTable table; // 센터의 테이블 영역
	JScrollPane scroll;

	JPanel p_south; // 센터 영역 남쪽에 정보 패널 추가! (라벨 4개, 텍스트필드 2개, 버튼 2개가 필요)
	JLabel la_id;
	JLabel la_idValue;
	JLabel la_name;
	JLabel la_tel;
	JTextField t_name2;
	JTextField t_tel2;
	JButton bt_edit;
	JButton bt_del;
	
	TableModel model; // JTable은 껍데기에 지나지 않기 때문에, 실제 보여질 데이터는 모델이 결정함
	int index=0; // 몇 번째 층에 회원을 넣을지 결정짓는 인덱스
	
	Connection con=null; // 접속은 윈도우창 생성 시 한 번 시도되며, 창 닫을 때 접속해제
	
	int member4_id; // 현재 사용자가 보고 있는 회원의 pk 값
	
	public MemberRegist() {
		// 생성
		p_west=new JPanel();
		t_id=new JTextField();
		t_name=new JTextField();
		t_tel=new JTextField();
		bt=new JButton("가입");
		
		p_center=new JPanel();
		// 생성자에 이차원배열의 대입 방식은 불편... 테이블 생성시점에 언제나 데이터가 이미 있어야 한다는 전제 조건이 깔려있기 때문
		// 생성자의 인수에 이 테이블에 보여줘야 할 데이터 또는 데이터처리 객체
		// JTable은 MVC패턴을 어느 정도 반영한 컴포넌트임.. (완벽하진 않음 ; 모델+컨트롤러)
//		model=new CarModel();
		model=new MyModel();
		table=new JTable(model);
		scroll=new JScrollPane(table);
		
		// 새로 추가된 센터 영역 컴포넌트 (남쪽에 추가)
		p_south = new JPanel();
		la_id = new JLabel("ID");
		la_name = new JLabel("Name");
		la_tel = new JLabel("Tel");
		la_idValue = new JLabel("");
		
		t_name2 = new JTextField();
		t_tel2 = new JTextField();
		bt_edit = new JButton("수정");
		bt_del = new JButton("삭제");
		
		
		// style 적용
		p_west.setBackground(Color.ORANGE);
		p_west.setPreferredSize(new Dimension(150,500));
		
		Dimension d = new Dimension(146, 35); // 크기 재사용 시 사용하는 Dimension
		t_id.setPreferredSize(d);
		t_name.setPreferredSize(d);
		t_tel.setPreferredSize(d);
		
		scroll.setPreferredSize(new Dimension(445,350));
		
		// 새로운 컴포넌트에 대한 style 추가 적용
		p_south.setPreferredSize(new Dimension(450, 145));
		p_south.setBackground(Color.YELLOW);
		
		Dimension d2 = new Dimension(145, 30);
		
		la_id.setPreferredSize(d2);
		la_name.setPreferredSize(d2);
		la_tel.setPreferredSize(d2);
		
		Dimension d3 = new Dimension(425, 30);
		la_idValue.setPreferredSize(d3);
		t_name2.setPreferredSize(d3);
		t_tel2.setPreferredSize(d3);
		
		
		// 조립
		p_west.add(t_id);
		p_west.add(t_name);
		p_west.add(t_tel);
		p_west.add(bt);
		add(p_west, BorderLayout.WEST); // 프레임의 서쪽에 부착
		
		p_center.add(scroll);
		add(p_center);
		add(p_south, BorderLayout.SOUTH);
		
		// 남쪽 패널에 부착
		p_south.add(la_id);
		p_south.add(la_idValue);
		p_south.add(la_name);
		p_south.add(t_name2);
		p_south.add(la_tel);
		p_south.add(t_tel2);
		p_south.add(bt_edit);
		p_south.add(bt_del);
		
		
		bt.addActionListener(this); // 버튼과 리스너 연결
		table.addMouseListener(this); // 테이블과 리스너 연결
		bt_edit.addActionListener(this); // 수정 버튼과 리스너 연결
		bt_del.addActionListener(this); // 삭제 버튼과 리스너 연결
		
		// 윈도우창과 리스너와의 연결
		this.addWindowListener(this);
		
		setBounds(100, 100, 610, 500);
		setVisible(true);
		
		// 디자인 설계 이후 DB 접속!!
		connect();
		selectAll();
	}
	
	public void connect() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			String url="jdbc:mysql://localhost:3306/dev";
			String id="java";
			String pass="1234";
			
			con=DriverManager.getConnection(url, id, pass);
			if(con!=null) {
				this.setTitle("접속 성공");
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	// 회원 한 명 등록 (model이 보유한 이차원 배열의 한 공간을 들어가게 할 예정, 즉 원하는 층에 들어갈 예정)
	public void regist() {
		// 회원 한 명을 일차원 배열에 담아서, 그 배열을 model이 보유한 2차원 배열에 가장 최근의 위치에 밀어 넣자
//		String[] member = {t_id.getText(), t_name.getText(), t_tel.getText()};
//		((MyModel)model).rows[index++]=member; // ++index이면 먼저 1이 증가되어 0번째가 비어버림
//		table.updateUI(); // 테이블 새로 고침
		String sql="insert into member4(id, name, tel)";
		sql+=" values('"+t_id.getText()+"','"+t_name.getText()+"','"+t_tel.getText()+"')";
		
		System.out.println(sql); // 콘솔에 출력된 SQL문을 실제 DB에서 실행했을 때 성공해야 함

		PreparedStatement pstmt=null; // 한 번만 만드는 것이 아니라 sql문 넣을 때마다 생성되어야 함
		try {
			pstmt=con.prepareStatement(sql); // 쿼리문이 준비
			
			int result=pstmt.executeUpdate(); // DML(insert, update, delete) 반환문 executeUpdate
			
			if(result>0) {
				JOptionPane.showMessageDialog(this, "등록 성공");
				selectAll(); // 조회
			}else {
				JOptionPane.showMessageDialog(this, "등록 실패");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if(pstmt!=null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	// 모든 회원 데이터 가져오기
	public void selectAll() {
		String sql="select * from member4";
		PreparedStatement pstmt=null; // finally에서 닫기 위해 초기 null값으로 초기화
		ResultSet rs=null;
		
		try {
			pstmt=con.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY); // 쿼리문 준비
			
			// select 문이므로 executeQuery() 호출
			rs=pstmt.executeQuery(); // select 문일 경우 쿼리 수행 시, 표가 반환되므로 해당 표 제어를 위한
													 // resultSet 객체가 반환됨
			
			rs.last(); // record의 마지막으로 포인터를 보냄
			int total = rs.getRow();
			System.out.println("현재까지 가입한 총 수는 "+total);
			
			 // rs 자체는 MyModel(Table)이 보유하고 있는 2차원 배열 자체가 아니므로, rs의 데이터를 2차원 배열로
			 // 변환하여 MyModel이 보유한 배열 대신 사용하여야 함... 즉 대체를 위함
			 ((MyModel)model).rows=new String[total][4];
			 
			 // 마지막 위치로 보냈던 rs의 커서를 다시 최초 위치로 복귀시킨다.. 레코드를 처음부터 차례대로 접근하기 위함
			 rs.beforeFirst(); // 이 자유로움은 pstmt 생성 시 부여한 상수 옵션 때문임.. ResultSet.TYPE_SCROLL_INSENESITVE
			 int index=0;
			 
			 while(rs.next()) {
				 String[] record = {
						 rs.getString("id"), rs.getString("name"), rs.getString("tel"), rs.getString("member4_id")
						 };
				 ((MyModel)model).rows[index++]=record;
			 }
			 
			 table.updateUI();// 테이블 갱신
			 
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if(rs!=null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			if(pstmt!=null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
	}
	
	// 선택된 회원 데이터 가져오기
	public void select(int member4_id) {
		// System.out.println("사원 선택했어?");
		String sql="select * from member4 where member4_id="+member4_id;
		
		System.out.println(sql);
		
		// 쿼리문으로 검증되었으므로, JDBC 통해 네트웍으로 전송하자
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			pstmt=con.prepareStatement(sql); // 쿼리문 객체 생성
			rs=pstmt.executeQuery(); // record 결과 반환
			
			// 화면에 출력
			if(rs.next()) { // 레코드가 있다면.. 아래의 코드 수행.. 즉, 회원이 있을 때만..
						la_idValue.setText(rs.getString("id"));
						t_name2.setText( rs.getString("name")); 
						t_tel2.setText(rs.getString("tel"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if(rs!=null) {
				try {
					rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			} 
			if (pstmt!=null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	// 선택된 회원 한 명 데이터 삭제하기
	public void delete(int member4_id) {
		String sql="delete from member4 where member4_id="+member4_id;
		
		System.out.println(sql);
		
		PreparedStatement pstmt=null;
		
		try {
			pstmt=con.prepareStatement(sql);
			
			// DML 수행 시, 이 쿼리 수행에 의해 영향을 받을 레코드 수가 반환됨.. 개발자는 이 반환값으로 실행 성공 여부를 판단해야 함
			// 만일 반환값이 0인 경우는 실패! (Error는 아님) 
			int result = pstmt.executeUpdate();
			if(result>0) {
				JOptionPane.showMessageDialog(this, "삭제 성공");
				// MyModel.row의 최신화가 되지 않아 table만 update됨... MyModel의 row값이 최신화되게 해야 함
				selectAll();
				// table.updateUI(); // repaint() : update() → paint() \\ updateUI() : component 새로 고침의 의미
			}else {
				JOptionPane.showMessageDialog(this, "삭제 실패");				
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (pstmt!=null) {
				try {
					pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
	}
	
	
	// action listener override 요소
	@Override
	public void actionPerformed(ActionEvent e) {
		Object obj = e.getSource();
		if(obj==bt) { // 등록이라면
			regist();
		}else if(obj==bt_edit) { // 수정이라면
			
		}else if(obj==bt_del) { // 삭제라면
			int result = JOptionPane.showConfirmDialog(this, "삭제하시겠습니까?");
			if(result == JOptionPane.OK_OPTION) {
				delete(member4_id); // pk를 넘겨주어야 함
			}
		}
		
		
	}
	
	public static void main(String[] args) {
		new MemberRegist();
	}
	
	// window listener override 요소
	@Override
	public void windowOpened(WindowEvent e) {
		System.out.println("windowOpened()");
	}

	@Override // 윈도우 창을 닫는 순간 호출되는 메서드이므로, 무언가 연결되어 있던 자원을 해제하는 용도로 적합
	public void windowClosing(WindowEvent e) {
		System.out.println("windowClosing()");
		
		// 데이터베이스 접속 끊기 → 프로세스 종료
		try {
			con.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
		} 
		
		// 프로그램 종료 (실행 중인 프로그램을 프로세스라고 함)
		System.exit(0);
	}

	@Override
	public void windowClosed(WindowEvent e) {
		System.out.println("windowClosed()");		
	}

	@Override
	public void windowIconified(WindowEvent e) {
		System.out.println("windowIconified()");		
		
	}

	@Override
	public void windowDeiconified(WindowEvent e) {
		System.out.println("windowDeiconified()");		
		
	}

	@Override
	public void windowActivated(WindowEvent e) {
		System.out.println("windowActivated()");		
		
	}

	@Override
	public void windowDeactivated(WindowEvent e) {
		System.out.println("windowDeactivated()");		
		
	}
	
	// mouseListner override 요소
	@Override
	public void mouseClicked(MouseEvent e) {
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// 테이블을 마우스로 클릭 시, JTable의 메서드 중 유저가 선택한 row, col 정보를 반환하는 메서드
		int row = table.getSelectedRow(); // 유저가 선택한 층(row)
		int col = table.getSelectedColumn(); // 유저가 선택한 호(col)
		
		String[][] rows = ((MyModel)model).rows;
		
		// 방법 1)
		System.out.println("선택한 레코드의 pk = "+ rows[row][3]);
		
		// 방법 2) JTable 자체에 자신의 셀의 정보 반환 → 다만 데이터는 있지만 표에 올라가지 않은 데이터인 primary key를 가져올 수 없음
		/* String value=(String)table.getValueAt(row, 1);
			 System.out.println(value);
		*/
		member4_id=Integer.parseInt(rows[row][3]);
		
		 select(member4_id); // pk 매개변수 전달 : 자료형이 String형이므로 int형으로 반환하여 전달해주어야 함
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		
	}
}
