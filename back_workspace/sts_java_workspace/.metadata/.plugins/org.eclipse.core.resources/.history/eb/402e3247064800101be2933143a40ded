package com.sinse.shopadmin.product.repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.sinse.shopadmin.global.exception.ProductException;
import com.sinse.shopadmin.global.util.DBManager;
import com.sinse.shopadmin.product.model.Product;
import com.sinse.shopadmin.product.model.SubCategory;

// Product 테이블에 대한 CRUD 만을 수행함 - 즉 데이터베이스 작업코드만 작성해야 함...
public class ProductDAO {
	DBManager dbManager = DBManager.getInstance();
	
	// 한 건 등록
	public void insert(Product product) throws ProductException { 
		// 상품 입력 폼의 값을 담고 있는 Product 모델을 출력해보기
		System.out.println(product.getProduct_name());
		System.out.println(product.getBrand());
		System.out.println(product.getPrice());
		System.out.println(product.getDiscount());
		System.out.println(product.getIntroduce());
		System.out.println(product.getDetail());
		System.out.println("SubCategory의 pk값은 "+product.getSubCategory().getSubcategory_id());
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		int result = 0; // 쿼리 실행 성공 여부를 결정 짓는 변수
		
		conn = dbManager.getConnection();
		StringBuffer sql = new StringBuffer();
		sql.append("insert into product(product_name, brand, price, discount, introduce, detail, subcategory_id) ");
		sql.append(" values(?,?,?,?,?,?,?)");
		
		try {
			pstmt = conn.prepareStatement(sql.toString());
			// 모델 객체에 채워진 데이터를 꺼내서, 바인드 변수에 대입하기
			pstmt.setString(1, product.getProduct_name());
			pstmt.setString(2, product.getBrand());
			pstmt.setInt(3, product.getPrice());
			pstmt.setInt(4, product.getDiscount());
			pstmt.setString(5, product.getIntroduce());
			pstmt.setString(6, product.getDetail());
			pstmt.setInt(7, product.getSubCategory().getSubcategory_id());
			
			// 쿼리수행
			result = pstmt.executeUpdate(); // DML 실행
			if(result==0) {
				throw new ProductException("등록 실패");
			}
			
		} catch (SQLException e) {
			// e.printStackTrace() 처리만 해버리면, 바깥쪽 즉 유저가 사용하는 프로그램에서는 에러의 원인을 알 수 없으므로 신뢰성이 떨어짐...
			// 따라서, 에러가 발생하면 이 영역에서만 처리를 국한시키지 말고, 외부 영역까지 에러의 원인을 전달해야 함
			e.printStackTrace();
			throw new ProductException("등록에 실패하였습니다.\n이용에 불편을 드려 죄송합니다.", e); // 우리가 만든 예외클래스를 통해 강제로 에러를 만들어버림
		} finally {
			dbManager.release(pstmt);
		}
	}
	
	// 방금 수행한 insert에 의해 증가된 최신 pk값 얻기!!
	// 나의 세션 내에서 증가된 것만 가져오기!!!!!!!!!!!!!!!! (select last_insert_id() 함수)
	// select max() 절대 쓰지 말것!!!!!!!! 다른 유저계정에 의한 증가값이 반영될 수 있음
	public int selectRecentPk() {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int pk = 0;
		
		conn = dbManager.getConnection();
		StringBuffer sql = new StringBuffer();
		sql.append("select last_insert_id() as product_id"); //컬럼명이 마음에 안들기 때문에 as 사용
		try {
			pstmt = conn.prepareStatement(sql.toString());
			rs = pstmt.executeQuery();
			if(rs.next()) { // 조회된 결과가 있다면...
				pk = rs.getInt("product_id");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			dbManager.release(pstmt, rs);
		}
		
		return pk;
	}
	
}
