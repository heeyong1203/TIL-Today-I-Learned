package com.sinse.shopadmin.product.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.swing.JProgressBar;
import javax.swing.border.TitledBorder;

// API 자체적으로 지원해주는 진행 바는 너무 단순하므로, 우리가 원하는 스타일의 바로 커스텀해보자
// Runnable 인터페이스란? run() 추상 메서드를 보유한 인터페이스 (※ runnable 자체가 쓰레드는 아님)
public class MyBar extends JProgressBar implements Runnable{
	FileInputStream fis; // 파일 대상 바이트 기반 입력스트림
	FileOutputStream fos; // fis, fos 원본 파일 복사 붙여넣기를 위해 필요한 준비물!
	File origin;
	File destination;
	
	public MyBar(File origin, File destination) {
		this.origin = origin;
		this.destination = destination;
		
		// 디렉토리 위치 추출 : file명.getParent
		System.out.println("새롭게 생성될 파일의 디렉토리는 "+destination.getParent());
		System.out.println("새롭게 생성될 파일명은 "+destination.getName());
		try {
			fis = new FileInputStream(origin); // 원본 파일을 대상으로 스트림 생성
			fos = new FileOutputStream(destination); // 파일이 복사될 대상에 대한 출력 스트림 생성(일단 틀 생성)
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		setPreferredSize(new Dimension(680, 50));
		setForeground(new Color(255,212,212));
		setBorder(new TitledBorder(""+".jpg ------> "+"23456789.jpg"));
		setStringPainted(true);// 진행 바 중앙에 텍스트 띄우기
		setFont(new Font("Verdana", Font.BOLD, 17));
		this.setValue(30);
	}
	
	// 진행률을 표시하는 메서드
	public void showRate(int count) {
		// (읽어들인 양/용량)*100 [%]
		this.setValue((int)(count / origin.length())*100); // setValue는 int형을 반환하기 때문에 형변환...
	}
	
	
	
	// 한 바이트씩 읽어들이지 말고, 버퍼를 만들어 한꺼번에 읽어들이기
	public void copyFast() {
		byte[] buff = new byte[1024]; // 메모리에 1024칸을 만들어라 최대속도 1kB씩 다운로드...
		int read = 0;
		int count=0;
		while(true) {
			try {
				read = fis.read(buff); // 1024byte 중 읽어들인 byte 량, os나 네트워크 환경에 따라 최대 속도인 1kB씩 읽어들이지 못할 수 있기 때문...
				if(read==-1)break;
				count++;
				fos.write(buff, 0, read);
				showRate(read);
				
			} catch (IOException e) {
				e.printStackTrace();
			}			
		}
	}
	
	// 파일에 생성된 스트림을 통해 읽고 내뱉자
	@Override // 쓰레드 생성을 위해 .java 새로운 클래스를 만들기보다 runnable을 implements하는 방법도 있음
	public void run() {
		copyFast();
		System.out.println("복사 완료");
		release();
	}
	
	public void release() {
		if(fos!=null) {
			try {
				fos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if(fis!=null) {
			try {
				fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}
