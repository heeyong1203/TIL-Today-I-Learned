package com.sinse.networkapp.echo.server;

import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;

// 접속한 클라이언트의 메시지를 그대로 보내주는 에코서버를 구축해본다
public class EchoServer {
	ServerSocket server; // 소켓이라는 단어가 포함되어 있으나, 대화형 소켓이 아닌 어떤 유저가 접속하는 지를 감지하는 접속 감지용 서버...
	
	public EchoServer() {
		try {
			server = new ServerSocket(9999);
			Socket socket = server.accept(); // 접속자가 발생할때까지 무한 대기 상태...
			String ip = socket.getInetAddress().getHostAddress();
			
			System.out.println(ip+"접속 발견!");
			
			// 소켓을 통해 데이터를 주고 받을 수 있는 스트림을 얻자!
			// 방향에 따라 - 입력과 출력
			// 데이터 처리 방식에 따라 - 바이트 ~~stream, 문자 ~~reader/~~writer, 버퍼
			InputStream is = socket.getInputStream(); // 바이트 기반의 입력스트림을 얻어옴
			// 원래 무한 루프는 엄청난 속도이므로 프로그램에서 사용시 부하가 걸릴 수 있어 주의해야 함...
			// 단, stream처리에서는 read 메서드 자체가 상대방에게 입력값을 받을 때까지 대기상태를 일으킴으로 인하여 부하가 발생하지 않음 
			while(true) {
				int data = is.read(); // 1byte 읽어들임... ex) yaho 중 y만 읽음
				System.out.print((char)data);				
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
		new EchoServer();
	}
}
